snippet aa "afterAll function is called once after all specs"
afterAll(() => {
	$0
});
endsnippet

snippet ae "afterEach function is called once after each spec"
afterEach(() => {
	$0
});
endsnippet

snippet ba "beforeAll function is called once before all specs"
beforeAll(() => {
	$0
});
endsnippet

snippet be "beforeEach function is called once before each spec"
beforeEach(() => {
	$0
});
endsnippet

snippet desc "creates a describe block"
describe('${1:Name of the group}', () => {
	$0
});
endsnippet

snippet desce "creates a describe block with different test data sets"
describe.each([${1:[1, 2], [2, 4]}])(
	'${2:double(%d)}',
	(${3:input, expected}) => {
		test(`returns ${expected}`, () => {
			${4:expect(double(input)).toBe(expected);}
		});
	}
);
endsnippet

snippet desco "creates a describe block that runs only"
describe.only('${1:Name of the group}', () => {
	$0
});
endsnippet

snippet descs "creates a describe block that will be skipped"
describe.skip('${1:Name of the group}', () => {
	$0
});
endsnippet

snippet exp "expect actual value"
expect($0)
endsnippet

snippet expas "expects the test to make the indicated number of assertions (useful for async)"
expect.assertions($0);
endsnippet

snippet expha "expects the test to make at least one assertion (useful for async)"
expect.hasAssertions();$0
endsnippet

snippet exprj "expect promise rejects to"
expect($1).rejects$0
endsnippet

snippet expr "expect promise resolves to"
expect($1).resolves$0
endsnippet

snippet it "creates an it block"
it('${1:should }', () => {
	$0
});
endsnippet

snippet ite "creates an it block with different test data sets"
it.each([${1:[1, 2], [2, 4]}])(
	'${2:double(%d)}',
	(${3:input, expected}) => {
		${0:expect(double(input)).toBe(expected);}
	}
);
endsnippet

snippet ito "creates an it block that runs only"
it.only('${1:should }', () => {
	$0
});
endsnippet

snippet its "creates an it block that will be skipped"
it.skip('${1:should }', () => {
	$0
});
endsnippet

snippet itt "creates a test placeholder"
it.todo('${1:should }');
endsnippet

snippet ita "creates an it block with async callback function"
it('${1:should }', async () => {
	$0
});
endsnippet

snippet jfn "creates jest.fn()"
jest.fn($0)
endsnippet

snippet cut "creates a template to test a class under test"
describe('${1:Name of the group}', () => {

	let ${2:cut};

	beforeEach(() => {
		$2 = $3;
	});

	test('${1:should }', () => {
		expect($2).toBe($0);
	});

});
endsnippet

snippet test "creates a test block"
test('${1:should }', () => {
	$0
});
endsnippet

snippet teste "creates an test block with different test data sets"
test.each([${1:[1, 2], [2, 4]}])(
	'${2:double(%d)}',
	(${3:input, expected}) => {
		${0:expect(double(input)).toBe(expected);}
	}
);
endsnippet

snippet testet "creates a test block using a permutation table"
test.each`
	${1:input}	| ${2:expected}
	${1}	| ${2}
	${2}	| ${4}
`('${3:double($${1:input})}', ({ ${1:input}, ${2:expected} }) => {
	${0:expect(double(${1:input})).toBe(${2:expected});}
});
endsnippet

snippet testo "creates a test block  that runs only"
test.only('${1:should }', () => {
	$0
});
endsnippet

snippet tests "creates a test block that will be skipped"
test.skip('${1:should }', () => {
	$0
});
endsnippet

snippet testt "creates a test placeholder"
test.todo('${1:should }');
endsnippet

snippet testa "creates an test block with async callback function"
test('${1:should }', async () => {
	$0
});
endsnippet

snippet tb "expects the first argument to be equal with the second one"
expect($1).toBe($0);
endsnippet

snippet tbct "expects the first argument to be close to the second one base on the delta"
expect($1).toBeCloseTo(${2:number}, ${3:delta});$0
endsnippet

snippet tbd "expects the argument is defined"
expect($1).toBeDefined();$0
endsnippet

snippet tbf "expects the argument is falsy"
expect($1).toBeFalsy();$0
endsnippet

snippet tbgt "expects the argument is greater than or equal"
expect($1).toBeGreaterThan($0);
endsnippet

snippet tbgte "expects the argument is greater than"
expect($1).toBeGreaterThanOrEqual($0);
endsnippet

snippet tbi "expects the argument is less than"
expect($1).toBeInstanceOf($0);
endsnippet

snippet tblt "expects the argument is less than"
expect($1).toBeLessThan($0);
endsnippet

snippet tblte "expects the argument is less than or equal"
expect($1).toBeLessThanOrEqual($0);
endsnippet

snippet tbn "expects the argument is null"
expect($1).toBeNull();$0
endsnippet

snippet tbt "expects the argument is truthy"
expect($1).toBeTruthy();$0
endsnippet

snippet tbu "expects the argument is undefined"
expect($1).toBeUndefined();$0
endsnippet

snippet tc "expects the list contains the item (===)"
expect(${1:list}).toContain($0);
endsnippet

snippet tce "expects the list contains the item (equals)"
expect(${1:list}).toContainEqual($0);
endsnippet

snippet te "expects the first argument to be equal with the second one"
expect($1).toEqual($0);
endsnippet

snippet thbc "returns true if the spy was called"
expect($1).toHaveBeenCalled();$0
endsnippet

snippet thbct "returns true if the spy has been called given times"
expect($1).toHaveBeenCalledTimes($0);
endsnippet

snippet thbcw "returns true if the spy has been called with"
expect($1).toHaveBeenCalledWith($0);
endsnippet

snippet thblcw "returns true if the spy has been last called with"
expect($1).toHaveBeenLastCalledWith($0);
endsnippet

snippet thl "expects the object to have length"
expect($1).toHaveLength($0);
endsnippet

snippet thp "returns true if the argument matches the second object"
expect($1).toHaveProperty(${2:keyPath}, ${3:value});$0
endsnippet

snippet tm "returns true if the argument matches the second value"
expect($1).toMatch($0);
endsnippet

snippet tmis "returns true if the argument matches the most recent inline snapshot"
expect($1).toMatchInlineSnapshot($0);
endsnippet

snippet tmo "returns true if the argument matches the second object"
expect($1).toMatchObject($0);
endsnippet

snippet tms "returns true if the argument matches the most recent snapshot"
expect($1).toMatchSnapshot($0);
endsnippet

snippet tse "expects the first argument to be strictly equal with the second one"
expect($1).toStrictEqual($0);
endsnippet

snippet tt "expects that the method will throw an error"
expect(() => {
	$0
}).toThrow($1);
endsnippet

snippet tte "expects that the method will throw an error"
expect(() => {
	$0
}).toThrowError($1);
endsnippet

snippet ttemis "expects that the method will throw an error matching the inline snapshot"
expect(() => {
	$0
}).toThrowErrorMatchingInlineSnapshot();
endsnippet

snippet ttems "expects that the method will throw an error mathing the snapshpot"
expect(() => {
	$0
}).toThrowErrorMatchingSnapshot();
endsnippet
